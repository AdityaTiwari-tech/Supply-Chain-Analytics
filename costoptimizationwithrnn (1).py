# -*- coding: utf-8 -*-
"""CostOptimizationwithRNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16yPdiVSMhYtIaXDXG6Aw8sDiuOT5PeGL
"""

import pandas as pd

from sklearn.model_selection import train_test_split
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
import numpy as np



data = pd.read_csv("supply_chain_data(1).csv")

data.head()

target_column = "Manufacturing costs"
feature_column = "Production volumes"

X = data[feature_column].values.reshape(-1,1)
y = data[target_column].values

scaler = MinMaxScaler()
X_scaled = scaler.fit(X)

X_train, X_test, y_train, y_test = train_test_split(data[feature_column], data[target_column], test_size=0.2, random_state=42)

model = tf.keras.Sequential([
    tf.keras.layers.Dense(64,activation='relu',input_dim=1),
    tf.keras.layers.Dense(32,activation='relu'),
    tf.keras.layers.Dense(1)
])

model.compile(optimizer='adam',loss='mean_squared_error')

print("X shape:", X.shape)
print("y shape:", y.shape)

min_production_volume = data["Order quantities"].min()
max_production_volume = 1000
step_size = 10

cheapest_cost = float("inf")
best_production_volume = None

for production_volume in range(min_production_volume,max_production_volume + 1, step_size):
  normalized_production_volume = scaler.transform(np.array([[production_volume]]))
  predicted_cost = model.predict(normalized_production_volume)
  if production_volume == best_production_volume:
      best_cost = predicted_cost[0][0]
  if predicted_cost[0][0] >= 0:
      cheapest_cost = predicted_cost[0][0]
      best_production_volume = production_volume
print("Most Optimal Production Volume to Minimize Manifacturing Cost:",best_production_volume)
print("The Cheapest Manifacturing Cost",cheapest_cost)